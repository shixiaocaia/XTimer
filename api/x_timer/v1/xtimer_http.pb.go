// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.20.1
// source: x_timer/v1/xtimer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationXTimerCreateTimer = "/x_timer.v1.XTimer/CreateTimer"
const OperationXTimerSayHello = "/x_timer.v1.XTimer/SayHello"

type XTimerHTTPServer interface {
	CreateTimer(context.Context, *CreateTimerRequest) (*CreateTimerReply, error)
	// SayHello Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterXTimerHTTPServer(s *http.Server, srv XTimerHTTPServer) {
	r := s.Route("/")
	r.GET("/ping/{name}", _XTimer_SayHello0_HTTP_Handler(srv))
	r.POST("/createTimer", _XTimer_CreateTimer0_HTTP_Handler(srv))
}

func _XTimer_SayHello0_HTTP_Handler(srv XTimerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationXTimerSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _XTimer_CreateTimer0_HTTP_Handler(srv XTimerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTimerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationXTimerCreateTimer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTimer(ctx, req.(*CreateTimerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTimerReply)
		return ctx.Result(200, reply)
	}
}

type XTimerHTTPClient interface {
	CreateTimer(ctx context.Context, req *CreateTimerRequest, opts ...http.CallOption) (rsp *CreateTimerReply, err error)
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
}

type XTimerHTTPClientImpl struct {
	cc *http.Client
}

func NewXTimerHTTPClient(client *http.Client) XTimerHTTPClient {
	return &XTimerHTTPClientImpl{client}
}

func (c *XTimerHTTPClientImpl) CreateTimer(ctx context.Context, in *CreateTimerRequest, opts ...http.CallOption) (*CreateTimerReply, error) {
	var out CreateTimerReply
	pattern := "/createTimer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationXTimerCreateTimer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *XTimerHTTPClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/ping/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationXTimerSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
